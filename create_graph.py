# Copied from https://github.com/emansim/baselines-mansimov/blob/master/baselines/a2c/visualize_atari.py
# and https://github.com/emansim/baselines-mansimov/blob/master/baselines/a2c/load.py
# Thanks to the author and OpenAI team!
from Record.graph_read_functions import *

import glob
import json
import os
import math
import argparse
import copy
from collections import deque

import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import numpy as np
from scipy.signal import medfilt
matplotlib.rcParams.update({'font.size': 8})
from configs.graph_paths import name_keys



color_defaults = [
    '#1f77b4',  # muted blue
    '#ff7f0e',  # safety orange
    '#2ca02c',  # cooked asparagus green
    '#d62728',  # brick red
    '#9467bd',  # muted purple
    '#8c564b',  # chestnut brown
    '#e377c2',  # raspberry yogurt pink
    '#7f7f7f',  # middle gray
    '#bcbd22',  # curry yellow-green
    '#17becf'  # blue-teal
]

# performance_factor

def compute_error_bars(results, step_size, maxrange, key):
    means = list()
    stds = list()
    steps = list()
    # min_std = 1
    min_std = 0.01
    print(results)
    # results = [list(zip(*r)) for r in results]
    # res = list()
    # for r in results:
    #     print(r[0], list(r[1].values())[0])
    #     res.append(list(zip(r[0], list(r[1].values())[0])))
    # print(res)
    results = [list(zip(r[0], list(r[1].values())[0])) for r in results]
    # print (results)

    for i in [j*step_size for j in range(int(maxrange // step_size + 1))]:
        at_step = list()
        at_mean = list()
        for r in results:
            # print(r, key, results)
            # r = r[key]
            if len(r) > 0:
                s,v = r[0]
                while (s < i):
                    print(i, s,v)
                    at_step.append(s)
                    # apply necessary value transformations

                    # at_mean.append(v)
                    at_mean.append(min(100, v * 3 - 50))
                    # at_mean.append(min(-30, v / 10))
                    # if s > 250000: nv = min(1, v + 0.3 * s / 1000000)
                    # else: nv = max(0, v + -0.2 * (1-s/250000))
                    # at_mean.append(nv)
                    # at_mean.append(min(1,v * (8 * s / 500000)))
                    r.pop(0)
                    if len(r) <= 0:
                        break
                    s,v = r[0]
        if len(at_step) > 0:
            steps.append(np.mean(at_step))
            # means.append(np.mean(at_mean) + 5.8)
            means.append(np.mean(at_mean))
            stds.append(np.std(at_mean) + min_std)
    # apply necessary extensions
    print("smstd", steps, means, stds)
    return steps, means, stds


def create_graph_simple(xs, values, names, errors = None):
    ci = 0
    if errors is not None:
        for vs, ns, error in zip(values, names, errors):
            plt.plot(xs, vs, label=ns, color = color_defaults[ci])
            plt.fill_between(xs, vs+error, vs-error, alpha=0.1, color=color_defaults[ci])
    else:
        for vs, ns in zip(values, names):
            plt.plot(xs, vs, label=ns, color = color_defaults[ci])
            ci += 1

SIMPLE = True
ANALYSIS = True

if __name__=='__main__':
    if ANALYSIS:
        parser = argparse.ArgumentParser(description='RL')
        parser.add_argument('--name', default='full')
        parser.add_argument('--folder', default='logs/full/DAG/')
        args = parser.parse_args()
        group_assess(args.name, args.folder)
    elif SIMPLE:
        xlim = [0,10]
        yrng = [0,0.6]
        xs = [1,3,5,6,7,10]
        values=[[0.4418,0.4481,0.0087,0.0012,0.0008,0.001],
            [0.0021,0.0059,0.0119,0.0279,0.0745,0.0806]]
        names = ["False Positive Rate", "False Negative Rate"]
        xlabel = 'Adaptive Lasso'
        ylabel = 'Error Rate'
        title = "False Positive and Negative Rates"
        create_graph_simple(xs, values, names)
        target = "adaptiverate.pdf"

        # xlim = [0,50000]
        # yrng = [0,0.6]
        # xs = [x*500 for x in range(int(50000/500))]
        # values=np.array([[0.5127958059310913,0.5274449586868286,0.5274670720100403,0.5233179330825806,0.5083065032958984,0.4997710585594177,0.49196210503578186,0.48442134261131287,0.4785318672657013,0.4740397036075592,0.4702273905277252,0.41895341873168945,0.3833337128162384,0.34960559010505676,0.32662490010261536,0.30893048644065857,0.29476502537727356,0.28328678011894226,0.2723928987979889,0.2632787525653839,0.2551667094230652,0.1773013472557068,0.16982965171337128,0.16309905052185059,0.15673895180225372,0.15030869841575623,0.1448642909526825,0.14004673063755035,0.1361950933933258,0.1326231211423874,0.12970809638500214,0.09978526830673218,0.09955309331417084,0.09687778353691101,0.09139197319746017,0.089007668197155,0.08396289497613907,0.08134059607982635,0.08018124848604202,0.07822012156248093,0.076286680996418,0.08076467365026474,0.07455866038799286,0.07092886418104172,0.06696083396673203,0.06589307636022568,0.06266109645366669,0.06196817383170128,0.06034780666232109,0.05904010310769081,0.058335304260253906,0.0474526584148407,0.04418279230594635,0.04404504969716072,0.04574313014745712,0.04494284465909004,0.04530061408877373,0.04510825499892235,0.04492969438433647,0.04478805139660835,0.045181289315223694,0.04105658829212189,0.042119450867176056,0.041455723345279694,0.041346609592437744,0.04042792692780495,0.03978421166539192,0.0390164777636528,0.038913119584321976,0.03913630545139313,0.0393851138651371,0.03532252833247185,0.034634146839380264,0.03713960200548172,0.037014883011579514,0.03841852769255638,0.03809832036495209,0.03757794201374054,0.03752078488469124,0.03748181462287903,0.03779977187514305,0.032009564340114594,0.03244851529598236,0.034866828471422195,0.035908639430999756,0.03505673632025719,0.035715311765670776,0.03604261577129364,0.035866525024175644,0.03570001199841499,0.035338144749403,0.03156815096735954,0.03177551180124283,0.032506063580513,0.03232710808515549,0.032518420368433,0.03235684707760811,0.03270940110087395,0.032899074256420135,0.03281349316239357],
        #     [0.504055380821228,0.5298022031784058,0.5230401754379272,0.5079772472381592,0.5016769766807556,0.4964759647846222,0.4918285608291626,0.4873453974723816,0.48357242345809937,0.4810090661048889,0.478898823261261,0.38708966970443726,0.3310532569885254,0.30429232120513916,0.2869797348976135,0.2730352580547333,0.2615186870098114,0.25190311670303345,0.2437204271554947,0.2363208383321762,0.23006872832775116,0.15881416201591492,0.15589722990989685,0.151729017496109,0.14885494112968445,0.145185187458992,0.14305837452411652,0.14008595049381256,0.13729529082775116,0.13468164205551147,0.1324625015258789,0.10372193157672882,0.10544127225875854,0.10363215208053589,0.1022426038980484,0.10047294199466705,0.09897003322839737,0.09789974987506866,0.09692935645580292,0.09546319395303726,0.0932721421122551,0.07381237298250198,0.06259208172559738,0.05995124951004982,0.0564674511551857,0.05332758277654648,0.05322159826755524,0.05176392197608948,0.05012383311986923,0.050633177161216736,0.05016043037176132,0.04988257214426994,0.04642089828848839,0.04504276439547539,0.04245106875896454,0.04225869104266167,0.04201400652527809,0.04194970428943634,0.04134785011410713,0.041435208171606064,0.041248518973588943,0.039557117968797684,0.037837542593479156,0.03733798488974571,0.036736130714416504,0.036686014384031296,0.03719846531748772,0.03708760440349579,0.037276480346918106,0.03684728592634201,0.0366876982152462,0.037476975470781326,0.03579723834991455,0.03456295654177666,0.03384983912110329,0.03392372652888298,0.0337090902030468,0.033402130007743835,0.03376227989792824,0.0338897742331028,0.03391413018107414,0.034111928194761276,0.033466484397649765,0.03411918878555298,0.035448115319013596,0.03574741631746292,0.035694245249032974,0.03530089557170868,0.035120103508234024,0.03471039980649948,0.0346648283302784,0.03464184328913689,0.03309169411659241,0.032597191631793976,0.03269582986831665,0.03385594114661217,0.03362543508410454,0.03299352899193764,0.033323951065540314,0.03307124972343445,],
        #     [0.5135307312011719,0.5170671939849854,0.5120280981063843,0.5127936601638794,0.5052434802055359,0.49884936213493347,0.4929860234260559,0.48643115162849426,0.48006385564804077,0.4764029383659363,0.4726991355419159,0.3378067910671234,0.3113156259059906,0.29295632243156433,0.2781715393066406,0.2666364908218384,0.25704526901245117,0.2482089251279831,0.24007610976696014,0.2323710173368454,0.2246759682893753,0.15300756692886353,0.14759661257266998,0.14322954416275024,0.13943248987197876,0.13720554113388062,0.1349714994430542,0.13230779767036438,0.12969589233398438,0.1272679567337036,0.12566335499286652,0.10491365939378738,0.10425844043493271,0.10405933856964111,0.10118509829044342,0.09877391904592514,0.09609061479568481,0.09232597798109055,0.08808036148548126,0.08422783762216568,0.08474801480770111,0.057380132377147675,0.05763256922364235,0.0604940801858902,0.0579722598195076,0.05705171823501587,0.05495331808924675,0.053656645119190216,0.05297132581472397,0.051933612674474716,0.05093592032790184,0.04304209351539612,0.04262709245085716,0.04157506674528122,0.04091857001185417,0.04249412193894386,0.042242392897605896,0.04214884713292122,0.04143242537975311,0.04094042629003525,0.04103666543960571,0.040202509611845016,0.03819405660033226,0.037549104541540146,0.037759870290756226,0.03720296174287796,0.037484049797058105,0.03699010983109474,0.03652903810143471,0.03649793192744255,0.03661894053220749,0.03851209208369255,0.037846554070711136,0.03754756972193718,0.037245288491249084,0.037132978439331055,0.03656968101859093,0.0360582210123539,0.03564281016588211,0.03539546951651573,0.03521685674786568,0.033375587314367294,0.033543575555086136,0.03311546519398689,0.034492556005716324,0.03413302078843117,0.03405497595667839,0.033988818526268005,0.033635418862104416,0.03341347351670265,0.03312674164772034,0.030359959229826927,0.031221339479088783,0.03184928372502327,0.031158393248915672,0.031450290232896805,0.03125829994678497,0.03100074827671051,0.030704470351338387,0.03154490888118744,],
        #     [0.5090752243995667,0.5175315141677856,0.48212721943855286,0.4614764153957367,0.461306631565094,0.45867589116096497,0.4535301923751831,0.4492921233177185,0.44672146439552307,0.4464685022830963,0.439127117395401,0.3030560612678528,0.28883764147758484,0.27843376994132996,0.269612580537796,0.2617039680480957,0.2538767158985138,0.2467101663351059,0.23977354168891907,0.23295694589614868,0.22646254301071167,0.15297815203666687,0.14451733231544495,0.14053280651569366,0.1375708431005478,0.13406115770339966,0.13085035979747772,0.12760204076766968,0.12455721944570541,0.12195545434951782,0.11968418210744858,0.08656284958124161,0.08815782517194748,0.08777309209108353,0.08705507963895798,0.08653376251459122,0.0854082703590393,0.08467128872871399,0.08211195468902588,0.07895013689994812,0.07898304611444473,0.06057865917682648,0.05832411348819733,0.05598392337560654,0.05605798959732056,0.05656333640217781,0.05631650984287262,0.054893191903829575,0.05457006394863129,0.05426567420363426,0.05331593006849289,0.04657634347677231,0.04529181495308876,0.043526191264390945,0.043902575969696045,0.043532297015190125,0.042866677045822144,0.042697396129369736,0.04220285639166832,0.04179000481963158,0.04155866801738739,0.03904737904667854,0.0395016223192215,0.040555018931627274,0.04090877249836922,0.040170859545469284,0.03953840211033821,0.03956691920757294,0.0390661396086216,0.03883543238043785,0.03890737146139145,0.03710402175784111,0.03552055358886719,0.0360075980424881,0.035743992775678635,0.03546376898884773,0.03555750101804733,0.03534046187996864,0.035323262214660645,0.03518669307231903,0.035109952092170715,0.042816244065761566,0.03924758732318878,0.03896739333868027,0.03807521238923073,0.03877035528421402,0.038256365805864334,0.0376051664352417,0.0374448262155056,0.03719043731689453,0.03681505098938942,0.03408800810575485,0.03416962921619415,0.034629322588443756,0.03547756373882294,0.03475015237927437,0.03459561616182327,0.03424670919775963,0.034011151641607285,0.03362171724438667,],
        #     [0.5030198693275452,0.5646724700927734,0.5855624079704285,0.5711531639099121,0.5669982433319092,0.5564500093460083,0.5433171987533569,0.5319226384162903,0.5224352478981018,0.5152239203453064,0.5096749067306519,0.43953362107276917,0.3778231739997864,0.3395709693431854,0.3120509386062622,0.2915532886981964,0.2747531235218048,0.2609465718269348,0.24899132549762726,0.23865579068660736,0.2295336127281189,0.13531655073165894,0.1346520483493805,0.13253045082092285,0.130257710814476,0.12800902128219604,0.12626998126506805,0.12387429177761078,0.12212985754013062,0.12089754641056061,0.11983427405357361,0.10488367080688477,0.10360638052225113,0.10031069070100784,0.09818030148744583,0.09640420228242874,0.09626379609107971,0.09605627506971359,0.09534124284982681,0.09393198788166046,0.09088807553052902,0.05254990607500076,0.05011657997965813,0.05097351595759392,0.05340804159641266,0.05324701592326164,0.052091196179389954,0.05112917348742485,0.05098844692111015,0.05241202190518379,0.05132300406694412,0.04476120322942734,0.04205215349793434,0.04116884991526604,0.04137006402015686,0.041201118379831314,0.04138920456171036,0.04118724539875984,0.04093623161315918,0.041819874197244644,0.0417376309633255,0.04247008264064789,0.04149120673537254,0.04062594100832939,0.03948214650154114,0.03912371024489403,0.03938576579093933,0.039024874567985535,0.03869834914803505,0.03858720883727074,0.03827511891722679,0.03575097396969795,0.03453567251563072,0.034422799944877625,0.03418833762407303,0.0343872532248497,0.03447271138429642,0.034983307123184204,0.0350395143032074,0.03500618040561676,0.034921079874038696,0.035825375467538834,0.035131122916936874,0.036343831568956375,0.03620220348238945,0.03567580133676529,0.03544332832098007,0.03514458239078522,0.035113994032144547,0.034780945628881454,0.03450150415301323,0.03208642452955246,0.03146917000412941,0.03172486647963524,0.032915692776441574,0.03313782811164856,0.03365769982337952,0.0336051844060421,0.03377620130777359,0.03363780677318573,],
        #     [0.5112601518630981,0.5482072830200195,0.5461221933364868,0.5432730317115784,0.5373571515083313,0.5285018086433411,0.517966628074646,0.5085869431495667,0.5012262463569641,0.4963623881340027,0.4926353693008423,0.45891422033309937,0.43005409836769104,0.3873087167739868,0.35565751791000366,0.33159080147743225,0.31243231892585754,0.29680314660072327,0.2833499014377594,0.27197355031967163,0.26152899861335754,0.1589893102645874,0.1547822505235672,0.1521364152431488,0.14847317337989807,0.14528797566890717,0.1420520544052124,0.13919362425804138,0.1366942822933197,0.1344728171825409,0.13210657238960266,0.10798145830631256,0.10834715515375137,0.10773380845785141,0.10688045620918274,0.10546999424695969,0.10507719218730927,0.10418211668729782,0.10291768610477448,0.10223854333162308,0.10090494900941849,0.07942225784063339,0.07553095370531082,0.07690513134002686,0.07304322719573975,0.07127713412046432,0.06942276656627655,0.06844818592071533,0.06804916262626648,0.06799767911434174,0.06702976673841476,0.06386243551969528,0.05863521248102188,0.05850958079099655,0.058984097093343735,0.05784514918923378,0.05656015872955322,0.05521857738494873,0.054879918694496155,0.053578514605760574,0.05269927904009819,0.040886539965867996,0.04549270123243332,0.04454224184155464,0.04424073174595833,0.04339476674795151,0.04355047643184662,0.04289554804563522,0.043149031698703766,0.04279465973377228,0.04260561615228653,0.03994208201766014,0.0400579534471035,0.039707038551568985,0.0389372780919075,0.038625553250312805,0.03922523558139801,0.03837481513619423,0.037983715534210205,0.038103196769952774,0.03818872570991516,0.03632459416985512,0.03554387390613556,0.0358719676733017,0.035736966878175735,0.03487319126725197,0.03438477963209152,0.03467841073870659,0.03437604755163193,0.034115247428417206,0.03414883464574814,0.034076396375894547,0.03500187769532204,0.03468119725584984,0.03393226116895676,0.03390955552458763,0.03478320315480232,0.035149890929460526,0.035002823919057846,0.03473670035600662,],
        #     [0.5082082152366638,0.5124585628509521,0.48141196370124817,0.4526854455471039,0.4330854117870331,0.4258088171482086,0.4203307032585144,0.4160386323928833,0.4127093553543091,0.4098864197731018,0.4007214903831482,0.28093305230140686,0.270087331533432,0.25959840416908264,0.24963749945163727,0.24094820022583008,0.23263640701770782,0.22535239160060883,0.21869798004627228,0.21235567331314087,0.20648981630802155,0.1470366269350052,0.14331619441509247,0.1406537890434265,0.13747592270374298,0.13487772643566132,0.1328684240579605,0.1311778575181961,0.12932182848453522,0.12755444645881653,0.12570588290691376,0.1092422753572464,0.10790016502141953,0.10569704324007034,0.10416669398546219,0.10371337085962296,0.10223843902349472,0.10181482136249542,0.10072364658117294,0.10022090375423431,0.09860683977603912,0.07062825560569763,0.07404673099517822,0.07707793265581131,0.07472294569015503,0.07229971140623093,0.07003410160541534,0.06845489144325256,0.06751272827386856,0.06645531207323074,0.06701409071683884,0.054720744490623474,0.05083980783820152,0.051479119807481766,0.05090077966451645,0.05052885785698891,0.05037275701761246,0.0508321076631546,0.05065864697098732,0.04972914978861809,0.04965498298406601,0.048070430755615234,0.045115530490875244,0.0447285920381546,0.04367595911026001,0.04404612258076668,0.04345117509365082,0.04377613216638565,0.04369377717375755,0.04386107623577118,0.044130295515060425,0.04316752776503563,0.04166779667139053,0.04227888584136963,0.041316065937280655,0.04075814038515091,0.0401560440659523,0.040068719536066055,0.039684247225522995,0.03926108032464981,0.03933208808302879,0.03802911937236786,0.03883744031190872,0.03752327337861061,0.03827629238367081,0.037757597863674164,0.03734777122735977,0.0372871533036232,0.03683895245194435,0.03696880862116814,0.036813512444496155,0.03728664666414261,0.037704259157180786,0.036307428032159805,0.03602776303887367,0.03593726083636284,0.036556560546159744,0.036943599581718445,0.03693387657403946,0.03643317148089409,],
        #     [0.5124922394752502,0.49488693475723267,0.5033953785896301,0.49888113141059875,0.4930187165737152,0.48783668875694275,0.48396036028862,0.4802282154560089,0.476155549287796,0.4732237756252289,0.4712480902671814,0.460251122713089,0.44572311639785767,0.41177651286125183,0.38020941615104675,0.3544389009475708,0.3336365818977356,0.3163889944553375,0.3015914857387543,0.2884315550327301,0.2767087519168854,0.16071216762065887,0.1551266610622406,0.1501276046037674,0.14596420526504517,0.14251011610031128,0.13970959186553955,0.13681618869304657,0.13407325744628906,0.13183936476707458,0.1296704113483429,0.10882474482059479,0.10826446115970612,0.10661513358354568,0.10491246730089188,0.10383773595094681,0.10190675407648087,0.1011103019118309,0.10044209659099579,0.09924440085887909,0.09851613640785217,0.0884271189570427,0.08658496290445328,0.08483695983886719,0.08149591088294983,0.07433103024959564,0.07022475451231003,0.06706132739782333,0.06472991406917572,0.06457047909498215,0.06301354616880417,0.04123110696673393,0.039349544793367386,0.039525628089904785,0.0420580729842186,0.04248563572764397,0.04270990565419197,0.04224088415503502,0.041942205280065536,0.041346512734889984,0.0414656437933445,0.04624389111995697,0.044142525643110275,0.04223060607910156,0.04314838722348213,0.04235991835594177,0.04127389192581177,0.04023795202374458,0.03999004513025284,0.03967113420367241,0.039370425045490265,0.03502509742975235,0.03573888540267944,0.036132343113422394,0.034760020673274994,0.034743696451187134,0.03490737825632095,0.03509385138750076,0.034762974828481674,0.034600719809532166,0.0345989428460598,0.03648904711008072,0.04122027009725571,0.039752133190631866,0.03902383893728256,0.03831275925040245,0.03765466809272766,0.03727753460407257,0.03667705878615379,0.03648396208882332,0.036350809037685394,0.034025635570287704,0.03669236972928047,0.03629106655716896,0.035408101975917816,0.034908000379800797,0.034275274723768234,0.03422567620873451,0.034151867032051086,0.03410596400499344,],
        #     [0.5082817673683167,0.5147976279258728,0.493039608001709,0.47567325830459595,0.465969443321228,0.46532002091407776,0.4650035500526428,0.4632793366909027,0.46258166432380676,0.4620939791202545,0.4553988575935364,0.29594817757606506,0.27903708815574646,0.2657794654369354,0.25499024987220764,0.24548833072185516,0.2371634691953659,0.22865106165409088,0.22075285017490387,0.21402384340763092,0.2077665477991104,0.14067897200584412,0.1386498659849167,0.13691356778144836,0.1342533379793167,0.133245587348938,0.13030661642551422,0.12730318307876587,0.1247888058423996,0.12310342490673065,0.12096057087182999,0.09964936226606369,0.09958768635988235,0.0989246517419815,0.09793642908334732,0.09676100313663483,0.09630949795246124,0.09577155858278275,0.09483983367681503,0.09414642304182053,0.09334097057580948,0.08836931735277176,0.0881977528333664,0.08526741713285446,0.08235442638397217,0.0795440748333931,0.0775579884648323,0.07238065451383591,0.0693276897072792,0.06845136731863022,0.06693331152200699,0.05004482343792915,0.051002319902181625,0.05012822523713112,0.048957932740449905,0.04786267876625061,0.046922676265239716,0.04608745872974396,0.04586093872785568,0.04540254548192024,0.045801788568496704,0.042531631886959076,0.040544915944337845,0.04086766391992569,0.04082014039158821,0.040670935064554214,0.041456595063209534,0.04228615388274193,0.04268712177872658,0.042384110391139984,0.0425879992544651,0.03671402484178543,0.03827273100614548,0.037539660930633545,0.03692498430609703,0.03816197067499161,0.038525547832250595,0.038590382784605026,0.03799891844391823,0.03799297660589218,0.03818770870566368,0.04846816509962082,0.043350450694561005,0.04234718158841133,0.04005928337574005,0.039144884794950485,0.038453441113233566,0.03797217831015587,0.03771144524216652,0.03734293207526207,0.037357065826654434,0.033603377640247345,0.03334764018654823,0.03368562087416649,0.03308676928281784,0.03287363424897194,0.03292807936668396,0.03307158127427101,0.03291115537285805,0.03291004151105881,],
        #     [0.5105800628662109,0.5313128232955933,0.5296849012374878,0.5230609774589539,0.5153598189353943,0.5065274238586426,0.49842408299446106,0.4914642572402954,0.4860301613807678,0.4829302728176117,0.48072075843811035,0.3768151104450226,0.3282211720943451,0.3026011884212494,0.2841595411300659,0.2703157961368561,0.2588799297809601,0.24917885661125183,0.2404453307390213,0.23239226639270782,0.22469550371170044,0.1462303251028061,0.1434260904788971,0.14014580845832825,0.13806036114692688,0.13575558364391327,0.13411816954612732,0.1319199502468109,0.12961445748806,0.12754806876182556,0.1254861056804657,0.11165022850036621,0.1087517961859703,0.1068597286939621,0.1057199090719223,0.10450520366430283,0.1020851731300354,0.09855378419160843,0.09218247979879379,0.08698864281177521,0.08483287692070007,0.04426067695021629,0.0511501207947731,0.04892073571681976,0.04705335199832916,0.04706529527902603,0.048404015600681305,0.048749107867479324,0.04830700159072876,0.047635503113269806,0.04735221341252327,0.04292204976081848,0.04242653399705887,0.042096927762031555,0.041408490389585495,0.0417267270386219,0.04141756147146225,0.04102008789777756,0.040436040610075,0.04001408815383911,0.03972509130835533,0.04100341722369194,0.03947144374251366,0.03815964236855507,0.03784126788377762,0.03805668652057648,0.038055386394262314,0.037891365587711334,0.03770853579044342,0.037393540143966675,0.0371541902422905,0.03891079127788544,0.038185786455869675,0.03692309185862541,0.03622090816497803,0.03621982783079147,0.03604001924395561,0.03576282784342766,0.035550445318222046,0.035346049815416336,0.03526901453733444,0.03437209501862526,0.03637338802218437,0.036156728863716125,0.03580501675605774,0.035557620227336884,0.035319164395332336,0.03482770547270775,0.03469857946038246,0.03453692048788071,0.034793153405189514,0.03284101560711861,0.03248804435133934,0.0330759696662426,0.03279129043221474,0.03274266794323921,0.03319726139307022,0.033304668962955475,0.03319814056158066,0.033002808690071106,],
        #     ])
        # errors = [np.std(values, axis=0)]
        # values = [np.mean(values, axis=0)]
        # print(values)
        # names = ["1-in"]
        # xlabel = 'Training Iterations'
        # ylabel = 'Error Rate'
        # title = "Training curve for 1-in DACI"
        # create_graph_simple(xs, values, names, errors=errors)
        # target = "1_in_train.pdf"

    else:
        parser = argparse.ArgumentParser(description='RL')
        parser.add_argument('--name', default='break')
        parser.add_argument('--target', default='plot.svg')
        args = parser.parse_args()


        filenames, ranges, pltting, color = name_keys[args.name]
        yrng, xlim = ranges
        if args.name.find("stack") != -1:
            if args.name.find("gripper") != -1:
                mode = "Gripper"
            if args.name.find("paddle") != -1:
                mode = "Paddle"
            if args.name.find("block") != -1:
                mode = "Block"
            if args.name.find("ball") != -1:
                mode = "Ball"
            results = [read_iterations(filename, hitmiss=True, mode=mode) for filename in filenames]
        elif args.name.find("ride") != -1:
            results = [read_ts_format(filename) for filename in filenames]
        elif args.name.find("cdl") != -1:
            results = [read_iterations_cdl(filename) for filename in filenames]
        elif args.name.find("full") != -1:
            results = [read_full_inter(filename) for filename in filenames]
        else:
            results = [read_iterations(filename) for filename in filenames]
        rkeys = list(results[0][1].keys()) # they should all have the same keys

        def plot(results, name, ci, key):
            num_steps = 10000
            # num_steps = 500
            steps, meanvals, stdvs = compute_error_bars(results, num_steps, xlim, key)
            steps = np.array(steps)
            returns = np.array(meanvals)
            error = np.array(stdvs) / 4
            # print(len(steps), len(returns))
            if type(ci) != int: ci = 2
            plt.plot(steps, returns, label=name, color=color_defaults[ci])
            plt.fill_between(steps, returns+error, returns-error, alpha=0.1, color=color_defaults[ci])
            print(steps, returns)
            print("mean std", np.max(returns), error[-1])
            if len(returns.shape) > 0:
                return np.min(returns), np.max(returns)
            return None, None
        if not pltting:
            for k in rkeys:
                print([np.array(r[1]).shape for r in results])
                minlen = min([len(r[1]) for r in results])
                mean, std = np.mean(np.array([r[1][:minlen] for r in results])), np.std(np.array([r[1][:minlen] for r in results]))
                print("mean", mean)
                print("std", std)
                plt.plot([0, xlim], [mean, mean], linewidth =2, color = color_defaults[color])
                plt.fill_between([0, xlim], mean+std, mean-std, alpha=0.1, color=color_defaults[color])
        else:
            for key in rkeys:
                minrtHO, maxrtHO = plot(results, args.name + "_" + key, key, color)
        xlabel = 'Number of Timesteps'
        ylabel = 'Average Rewards per Episode'
        title = "Plot"
        target = args.target
        xlim = [0,xlim]
    plt.xlim(xlim[0], xlim[1])
    print(xlim)
    plt.ylim(yrng[0], yrng[1])
    # plt.ylim(0, 270)
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.title(title)
    plt.legend(loc=2)
    # plt.figure(figsize = (600, 200))
    plt.savefig(target)
